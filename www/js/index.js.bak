/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Wait for the deviceready event before using any of Cordova's device APIs.
// See https://cordova.apache.org/docs/en/latest/cordova/events/events.html#deviceready
document.addEventListener('deviceready', onDeviceReady, false);

function onDeviceReady() {
    // Cordova is now initialized. Have fun!

    console.log('Running cordova-' + cordova.platformId + '@' + cordova.version);
    document.getElementById('deviceready').classList.add('ready');
// Check platform
    const isAndroid = device.platform === 'Android';
    const isIOS = device.platform === 'iOS';

    if (isAndroid) {
        requestAndroidPermissions().then(startBLEScan).catch((err) => {
            console.error('Permission error:', err);
            alert('Bluetooth permission denied or unavailable.');
        });
    } else if (isIOS) {
        startBLEScan();
    } else {
        alert('Unsupported platform');
    }
}

// Android: request runtime permissions
function requestAndroidPermissions() {
    return new Promise((resolve, reject) => {
        const permissions = cordova.plugins.permissions;
        const requiredPermissions = [
            permissions.ACCESS_FINE_LOCATION,
            permissions.BLUETOOTH_SCAN,
            permissions.BLUETOOTH_CONNECT
        ];

        permissions.hasPermission(requiredPermissions, (status) => {
            if (status.hasPermission) {
                resolve();
            } else {
                permissions.requestPermissions(requiredPermissions, (result) => {
                    if (result.hasPermission) {
                        resolve();
                    } else {
                        reject('Permissions denied');
                    }
                }, reject);
            }
        }, reject);
    });
}

// Start BLE scanning
function startBLEScan() {
    console.log('Starting BLE scan...');
    
    ble.scan([], 5, (device) => {
        console.log('Found device:', device);
        alert(`Device: ${device.name || 'Unnamed'} - ${device.id}`);
    }, (error) => {
        console.error('BLE scan error:', error);
        alert('Scan failed: ' + JSON.stringify(error));
    });
}
}
